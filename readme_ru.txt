ZX-Unikeyboard

A keyboard controller for Speccy that allows to connect any keyboard matrix (up to 26 pins) 
and remap its keys into standard Speccy keyboard layout by a software supplied.

Контроллер и необходимое ПО для опроса и построения прошивку под произвольную клавиатурную 
матрицу до 26 пин.

valerum@rambler.ru 
Russia, 2021

Эта тема на форуме
https://zx-pk.ru/threads/32497-kak-peredelat-prakticheski-lyubuyu-klaviaturu-v-ps-2/page8.html

*********************************************************************************************

Содержимое каталогов проекта:

Schematic – схемы контроллера в версиях для EPM7128SLC84  и EPM3128ATC
CPLD_epm7128_version,
CPLD_epm3128_version – прошивки и исходный код (Quartus II) под соответствующие CPLD. 
avr_keyexplorer – исходный код «тестовой» прошивки для первоначального считывания клавиатуры, 
	а также сборка прошивки для ATmega32-16AU - скетч для Arduino IDE
UniKeyConfUtil – программа для анализа клавиатуры на контроллере с «тестовой» прошивкой. Требуется 
	для построения файла описания произвольной клавиатуры.
avr_kbd – исходный код «рабочей» прошивки для ATmega32 (скетч Arduino)


*********************************************************************************************

Краткий HOW-TO по настройке произвольной клавиатуры.

	Этап 1. Подключаем клавиатуру к атмеге (32, 16 или какой там захочется - главное, чтоб было 
как минимум четыре 8-разрядных порта) и собираем под нее avr-keyexplorer.ino в Arduino IDE:

Если нет поддержки нужного контроллера, ставим его, например, из модуля MightyCore через менеджере 
плат - https://mcudude.github.io/MightyCore/package_MCUdude_MightyCore_index.json), как добавить в 
менеджер плат - читать здесь: https://alexgyver.ru/lessons/naked-chip/. 
Обращаем внимание на установку частоты 8 мгц в IDE при сборке прошивки, а также на установку 
соответствующих фьюзов (LOW=0x04, HIGH=0xD7 – важно получить 8 мгц на внутреннем генераторе). 
В случае других частот/вариантов тактирования правим то и другое единообразно.

Если есть отклонения от схемы в подключении пинов клавиатурного разъема к атмеге - приводим в соответствие 
все #define PIN* в скетче.
Прошиваем сборку «тестовой» прошивки в атмегу своим любимым программатором и соответствующим софтом.

Внимание ! Если CPLD уже запаяна, лучше прошить ее ДО атмеги, чтобы ее выводы SPI были в режиме входов 
и не мешали работа программатора с атмегой. В ином случае для прошивки ATmega потребуется отключать 
питание CPLD.


	Этап 2. Подключаем UART атмеги к ПК через любой удобный преобразователь, смотрим дебаг с 
соответствующего компорта в режиме 115200 8-n-1, можно пользоваться прилагаемой программой PortMon, 
можно встроенным монитором ком-порта в Arduino IDE. Нажимаем все клавиши своей клавиатуры, они все 
должны генерировать нажатия с парой чисел в дебаговом выводе - это номера пары пинов для каждой клавиши.


	Этап 3. Подготавливаем файл клавиатурного шаблона — это текстовый файл с именами всех имеющихся 
клавиш по одному в каждой строке (допускаются цифры и буквы латиницы, а также знаки «-» и «_»; прочие 
символы в именах могут вызвать ошибки компиляции прошивки на следующих этапах). Для анализа рекомендуется 
внести ВСЕ клавиши, а не только предполагаемые к использованию, иначе может некорректно пройти анализ 
столбцов и строк и останутся непривязанные клавиши. Лучше вносить их не в алфавитном порядке, а в соответствии 
с расположением на клавиатуре (например, слева направа и сверху вниз).

Можно отредактировать имеющийся шаблон из двух приложенных (Asus X200 – 82 клавиши без кейпада, Asus X551 
– 102 клавиши с кейпадом, но без выделенного Insert).


	Этап 4. Запускаем UniKeyboardConf_en.exe (или .._ru.exe), выбираем COM-порт, куда подключен UART 
для атмеги, в режиме 115200 8-n-1 (остальные параметры не важны).
При необходимости можно здесь же отредактировать файл клавиатурного шаблона — Edit Keyboard template (из 
программы вызывается notepad для его редактирования), сохраняем.
Загружаем файл шаблона (Open Keyboard Template), удостоверяемся, что считано нужное количество клавиш. 
Запускаем считывание (Start reading keys), нажимаем все клавиши в соответствии с подсказками; если произошла 
ошибка — можно заново начать считывание кнопкой «Start reading keys».
По завершении считывания всех клавиш из списка будет предложено начать анализ данных («Would you like to 
analyze...»), после завершения анализа будет дан комментарий по результату, построен и предложен к сохранению 
файл customkey.h. Его следует сохранить в каталог с прошивкой avr_kbd.
В результате анализа будут получены два непересекающихся множества линий клавиатуры — продолжных и поперечных. 
Те, что в меньшем количестве, будут далее считаться столбцами, остальные — строками. В файле customkey.h будут 
включены все определения имен клавиш с префиксом KEY_, массив соответствующих им линий и два массива с номерами 
линий-столбцов (cols) и линий-строк (rows).

Внимание ! Если после анализа выдается предупреждение о том, что остались неприсвоенные строки/столбцы так как 
в паре строка/столбец оказалась всего одна клавиша, нужно проанализировать, что это за клавиши и не было ли 
ошибок ввода. Если указанные кавиши не планируется использовать на Спеке, то можно не обращать внимания на это 
предупреждение — в файл customkey.h они не будут включены.


	Этап 5. Ревизируем исходный код прошивки avr_kbd.ino на предмет соответствия имен клавиш в кейсах 
внутри функции fill_kbd_matrix тому, что сформировано в customkey.h, добиваемся, добиваемся отстутствия ошибок 
компиляции, если нужно – корректируем обработку нужных клавиш. Собираем прошивку, загружаем ее в Atmega.

	Этап 6. Если CPLD еще нет, то запаиваем ее и прошиваем (пример прошивки для epm7128slc84 в проекте 
соответствует схеме). Подключаем контроллер к Спеку - в соответствии со схемой. Питание на контроллер в рабочем 
режиме подается от Спека с разъема с линиями KDx.

Помимо клавиш Спека (5х8) имеет 4 спецсигнала: - /Reset, /Magic (импульс низкого уровня 0,5с), Turbo и 
Special (меняют состояние по нажатию, сохраняется при выключении). Можно подключить эти сигналы. По ним же 
можно проверить реагирование клавиатуры на нажати без Спека (логическим пробником, тестером и т.п.)
	
	Этап 7. (Опионально) - доделываем/переделываем обработку нужных клавиш, донастраиваем рабочую прошивку 
под себя. 